const fs = require('fs');
const path = require('path');

// Read package.json for project name and dependencies
function getProjectMetadata(directory) {
  const packageJsonPath = path.join(directory, 'package.json');
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
    return {
      projectName: packageJson.name || 'Unnamed Project',
      dependencies: packageJson.dependencies || {},
    };
  }
  return { projectName: 'Unnamed Project', dependencies: {} };
}

function printFileTree(tree, indent = 0) {
  let treeOutput = '';
  for (const key in tree) {
    if (tree[key].lines) {
      treeOutput += ' '.repeat(indent) + `└── ${key} (${tree[key].lines} LOC)\n`;
    } else {
      treeOutput += ' '.repeat(indent) + `└── ${key}/\n` + printFileTree(tree[key], indent + 4);
    }
  }
  return treeOutput;
}

function generateReport(usageData, outputPath, packageName, directory) {
  const { projectName, dependencies } = getProjectMetadata(directory);
  const reportLines = [];

  // Report header
  reportLines.push(`\n===== Component and Function Usage Report =====\n`);
  reportLines.push(`Generated by: ${packageName}`);
  reportLines.push(`Project: ${projectName}\n`);
  reportLines.push(`Total Files: ${usageData.totalFiles}`);
  reportLines.push(`Total Directories: ${usageData.totalDirectories}`);
  reportLines.push(`Total Lines of Code: ${usageData.totalLines}`);
  
  // Project Dependencies
  reportLines.push(`\n--- Project Dependencies ---\n`);
  Object.keys(dependencies).forEach(dep => {
    reportLines.push(`${dep}: ${dependencies[dep]}`);
  });
  reportLines.push('\n==============================================\n');

  // Directory Tree
  reportLines.push('--- Project File Structure ---\n');
  reportLines.push(printFileTree(usageData.fileTree));
  reportLines.push('\n==============================================\n');


  // Report for functions
  reportLines.push('Backend/Frontend Functions Usage:\n');
  Object.keys(usageData.functions).forEach((func) => {
    reportLines.push(`Function: ${func}`);
    usageData.functions[func].forEach((entry) => {
      if(entry.status === 'defined') {
        reportLines.push(`  - Defined at: ${entry.file}, Line: ${entry.line}`);
      }
      if(entry.status === 'imported') {
        reportLines.push(`  - Imported at: ${entry.file}, Line: ${entry.line}`);
      }
      if(entry.status === 'called') {
        console.log(JSON.stringify(entry));
        reportLines.push(`  - Called at: ${entry.file}, Total Calls: ${entry.totalCalls}, Line: ${entry.line}`);
      }
    });
    reportLines.push('\n');
  });

  // Write to output file
  fs.writeFileSync(outputPath, reportLines.join('\n'));
}

module.exports = { generateReport };
